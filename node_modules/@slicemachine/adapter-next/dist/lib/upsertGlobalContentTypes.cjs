"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const prismicTsCodegen = require("prismic-ts-codegen");
const fs = require("node:fs/promises");
const path = require("node:path");
const constants = require("../constants.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const fs__namespace = /* @__PURE__ */ _interopNamespaceDefault(fs);
const path__namespace = /* @__PURE__ */ _interopNamespaceDefault(path);
const upsertGlobalContentTypes = async ({ actions, helpers, options, project }) => {
  const filePath = helpers.joinPathFromRoot(options.generatedTypesFilePath || "prismicio-types.d.ts");
  const [customTypeModelDescriptors, sharedSliceModelDescriptors] = await Promise.all([
    actions.readAllCustomTypeModels(),
    actions.readAllSliceModels()
  ]);
  const customTypeModels = customTypeModelDescriptors.map((customTypeModelDescriptors2) => {
    return customTypeModelDescriptors2.model;
  });
  const sharedSliceModels = sharedSliceModelDescriptors.map((sharedSliceModelDescriptors2) => {
    return sharedSliceModelDescriptors2.model;
  });
  let contents = prismicTsCodegen.generateTypes({
    customTypeModels,
    sharedSliceModels,
    clientIntegration: {
      includeCreateClientInterface: true,
      includeContentNamespace: true
    },
    typesProvider: await prismicTsCodegen.detectTypesProvider({ cwd: project.root })
  });
  contents = `${constants.NON_EDITABLE_FILE_BANNER}

${contents}`;
  if (options.format) {
    contents = await helpers.format(contents, filePath);
  }
  await fs__namespace.mkdir(path__namespace.dirname(filePath), { recursive: true });
  await fs__namespace.writeFile(filePath, contents);
};
exports.upsertGlobalContentTypes = upsertGlobalContentTypes;
//# sourceMappingURL=upsertGlobalContentTypes.cjs.map
