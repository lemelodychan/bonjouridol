"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const commonTags = require("common-tags");
const fs = require("node:fs/promises");
const path = require("node:path");
const constants = require("../constants.cjs");
const pascalCase = require("./pascalCase.cjs");
const buildSliceLibraryDirectoryPath = require("./buildSliceLibraryDirectoryPath.cjs");
const getJSFileExtension = require("./getJSFileExtension.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const fs__namespace = /* @__PURE__ */ _interopNamespaceDefault(fs);
const path__namespace = /* @__PURE__ */ _interopNamespaceDefault(path);
const upsertSliceLibraryIndexFile = async (args) => {
  const extension = await getJSFileExtension.getJSFileExtension({
    helpers: args.helpers,
    options: args.options
  });
  const filePath = path__namespace.join(buildSliceLibraryDirectoryPath.buildSliceLibraryDirectoryPath({
    libraryID: args.libraryID,
    helpers: args.helpers
  }), `index.${extension}`);
  const slices = await args.actions.readAllSliceModelsForLibrary({
    libraryID: args.libraryID
  });
  let contents;
  if (args.options.lazyLoadSlices) {
    contents = commonTags.stripIndent`
			${constants.NON_EDITABLE_FILE_BANNER}

			import dynamic from 'next/dynamic'

			export const components = {
				${slices.map((slice) => {
      const id = slice.model.id;
      const dirName = pascalCase.pascalCase(slice.model.name);
      return `${id}: dynamic(() => import('./${dirName}'))`;
    }).join(",\n")}
			}
		`;
  } else {
    contents = commonTags.stripIndent`
			${constants.NON_EDITABLE_FILE_BANNER}

			${slices.map((slice) => {
      const componentName = pascalCase.pascalCase(slice.model.name);
      const dirName = pascalCase.pascalCase(slice.model.name);
      return `import ${componentName} from "./${dirName}";`;
    }).join("\n")}

			export const components = {
				${slices.map((slice) => {
      const id = slice.model.id;
      const componentName = pascalCase.pascalCase(slice.model.name);
      return `${id}: ${componentName},`;
    }).join("\n")}
			}
		`;
  }
  if (args.options.format) {
    contents = await args.helpers.format(contents, filePath);
  }
  await fs__namespace.writeFile(filePath, contents);
};
exports.upsertSliceLibraryIndexFile = upsertSliceLibraryIndexFile;
//# sourceMappingURL=upsertSliceLibraryIndexFile.cjs.map
