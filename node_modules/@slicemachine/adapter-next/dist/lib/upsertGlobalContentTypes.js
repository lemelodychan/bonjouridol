import { generateTypes, detectTypesProvider } from "prismic-ts-codegen";
import * as fs from "node:fs/promises";
import * as path from "node:path";
import { NON_EDITABLE_FILE_BANNER } from "../constants.js";
const upsertGlobalContentTypes = async ({ actions, helpers, options, project }) => {
  const filePath = helpers.joinPathFromRoot(options.generatedTypesFilePath || "prismicio-types.d.ts");
  const [customTypeModelDescriptors, sharedSliceModelDescriptors] = await Promise.all([
    actions.readAllCustomTypeModels(),
    actions.readAllSliceModels()
  ]);
  const customTypeModels = customTypeModelDescriptors.map((customTypeModelDescriptors2) => {
    return customTypeModelDescriptors2.model;
  });
  const sharedSliceModels = sharedSliceModelDescriptors.map((sharedSliceModelDescriptors2) => {
    return sharedSliceModelDescriptors2.model;
  });
  let contents = generateTypes({
    customTypeModels,
    sharedSliceModels,
    clientIntegration: {
      includeCreateClientInterface: true,
      includeContentNamespace: true
    },
    typesProvider: await detectTypesProvider({ cwd: project.root })
  });
  contents = `${NON_EDITABLE_FILE_BANNER}

${contents}`;
  if (options.format) {
    contents = await helpers.format(contents, filePath);
  }
  await fs.mkdir(path.dirname(filePath), { recursive: true });
  await fs.writeFile(filePath, contents);
};
export {
  upsertGlobalContentTypes
};
//# sourceMappingURL=upsertGlobalContentTypes.js.map
