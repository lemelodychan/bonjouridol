import * as fs from "node:fs/promises";
import * as path from "node:path";
import { buildSliceLibraryDirectoryPath } from "../lib/buildSliceLibraryDirectoryPath.js";
import { isSharedSliceModel } from "../lib/isSharedSliceModel.js";
import { readJSONFile } from "../lib/readJSONFile.js";
const sliceRead = async (data, { helpers }) => {
  const libraryDir = buildSliceLibraryDirectoryPath({
    libraryID: data.libraryID,
    helpers
  });
  await fs.mkdir(libraryDir, { recursive: true });
  const childDirs = await fs.readdir(libraryDir, { withFileTypes: true });
  const modelReadErrors = [];
  const [model] = (await Promise.all(childDirs.map(async (childDir) => {
    if (childDir.isDirectory()) {
      const modelPath = path.join(libraryDir, childDir.name, "model.json");
      try {
        const modelContents = await readJSONFile(modelPath);
        if (isSharedSliceModel(modelContents) && modelContents.id === data.sliceID) {
          return modelContents;
        }
      } catch (error) {
        modelReadErrors.push(modelPath);
      }
    }
  }))).filter((model2) => Boolean(model2));
  if (model) {
    return {
      model
    };
  } else {
    if (modelReadErrors.length) {
      throw new Error(`Did not find a Slice model with ID "${data.sliceID}" in the "${data.libraryID}" Slice Library.

Those Slice models could not be read:
  - ${modelReadErrors.join("\n  - ")}`);
    }
    throw new Error(`Did not find a Slice model with ID "${data.sliceID}" in the "${data.libraryID}" Slice Library.`);
  }
};
export {
  sliceRead
};
//# sourceMappingURL=slice-read.js.map
