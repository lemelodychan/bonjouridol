"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const fse = require("fs-extra");
const buildSliceDirectoryPath = require("../lib/buildSliceDirectoryPath.cjs");
const rejectIfNecessary = require("../lib/rejectIfNecessary.cjs");
const updateSliceModelFile = require("../lib/updateSliceModelFile.cjs");
const upsertGlobalContentTypes = require("../lib/upsertGlobalContentTypes.cjs");
const upsertSliceLibraryIndexFile = require("../lib/upsertSliceLibraryIndexFile.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const fse__namespace = /* @__PURE__ */ _interopNamespaceDefault(fse);
const sliceRename = async (data, context) => {
  const { model: currentModel } = await context.actions.readSliceModel({
    libraryID: data.libraryID,
    sliceID: data.model.id
  });
  await fse__namespace.move(buildSliceDirectoryPath.buildSliceDirectoryPath({
    libraryID: data.libraryID,
    model: currentModel,
    helpers: context.helpers
  }), buildSliceDirectoryPath.buildSliceDirectoryPath({
    libraryID: data.libraryID,
    model: data.model,
    helpers: context.helpers
  }));
  await updateSliceModelFile.updateSliceModelFile({
    libraryID: data.libraryID,
    model: data.model,
    ...context
  });
  rejectIfNecessary.rejectIfNecessary(await Promise.allSettled([
    upsertGlobalContentTypes.upsertGlobalContentTypes(context),
    upsertSliceLibraryIndexFile.upsertSliceLibraryIndexFile({ libraryID: data.libraryID, ...context })
  ]));
};
exports.sliceRename = sliceRename;
//# sourceMappingURL=slice-rename.cjs.map
