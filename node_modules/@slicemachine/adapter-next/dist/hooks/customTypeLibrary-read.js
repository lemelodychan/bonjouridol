import * as fs from "node:fs/promises";
import * as path from "node:path";
import { buildCustomTypeLibraryDirectoryPath } from "../lib/buildCustomTypeLibraryDirectoryPath.js";
import { readJSONFile } from "../lib/readJSONFile.js";
const isCustomTypeModel = (input) => {
  return typeof input === "object" && input !== null && "json" in input;
};
const customTypeLibraryRead = async (_data, { helpers }) => {
  const dir = buildCustomTypeLibraryDirectoryPath({ helpers });
  await fs.mkdir(dir, { recursive: true });
  const childDirs = await fs.readdir(dir, { withFileTypes: true });
  const ids = [];
  await Promise.all(childDirs.map(async (childDir) => {
    if (childDir.isDirectory()) {
      const childDirContents = await fs.readdir(path.join(dir, childDir.name), {
        withFileTypes: true
      });
      const isCustomTypeDir = childDirContents.some((entry) => {
        return entry.isFile() && entry.name === "index.json";
      });
      if (isCustomTypeDir) {
        const modelPath = path.join(dir, childDir.name, "index.json");
        const modelContents = await readJSONFile(modelPath);
        if (isCustomTypeModel(modelContents)) {
          ids.push(modelContents.id);
        }
      }
    }
  }));
  return {
    ids: ids.sort()
  };
};
export {
  customTypeLibraryRead
};
//# sourceMappingURL=customTypeLibrary-read.js.map
