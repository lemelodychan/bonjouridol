import * as fs from "node:fs/promises";
import * as path from "node:path";
import { buildSliceLibraryDirectoryPath } from "../lib/buildSliceLibraryDirectoryPath.js";
import { isSharedSliceModel } from "../lib/isSharedSliceModel.js";
import { readJSONFile } from "../lib/readJSONFile.js";
const sliceLibraryRead = async (data, { helpers }) => {
  const dir = buildSliceLibraryDirectoryPath({
    libraryID: data.libraryID,
    helpers
  });
  await fs.mkdir(dir, { recursive: true });
  const childDirs = await fs.readdir(dir, { withFileTypes: true });
  const sliceIDs = [];
  await Promise.all(childDirs.map(async (childDir) => {
    if (childDir.isDirectory()) {
      const modelPath = path.join(dir, childDir.name, "model.json");
      try {
        const modelContents = await readJSONFile(modelPath);
        if (isSharedSliceModel(modelContents)) {
          sliceIDs.push(modelContents.id);
        }
      } catch {
      }
    }
  }));
  return {
    id: data.libraryID,
    sliceIDs: sliceIDs.sort()
  };
};
export {
  sliceLibraryRead
};
//# sourceMappingURL=sliceLibrary-read.js.map
