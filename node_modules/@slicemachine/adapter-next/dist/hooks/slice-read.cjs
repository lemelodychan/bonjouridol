"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const fs = require("node:fs/promises");
const path = require("node:path");
const buildSliceLibraryDirectoryPath = require("../lib/buildSliceLibraryDirectoryPath.cjs");
const isSharedSliceModel = require("../lib/isSharedSliceModel.cjs");
const readJSONFile = require("../lib/readJSONFile.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const fs__namespace = /* @__PURE__ */ _interopNamespaceDefault(fs);
const path__namespace = /* @__PURE__ */ _interopNamespaceDefault(path);
const sliceRead = async (data, { helpers }) => {
  const libraryDir = buildSliceLibraryDirectoryPath.buildSliceLibraryDirectoryPath({
    libraryID: data.libraryID,
    helpers
  });
  await fs__namespace.mkdir(libraryDir, { recursive: true });
  const childDirs = await fs__namespace.readdir(libraryDir, { withFileTypes: true });
  const modelReadErrors = [];
  const [model] = (await Promise.all(childDirs.map(async (childDir) => {
    if (childDir.isDirectory()) {
      const modelPath = path__namespace.join(libraryDir, childDir.name, "model.json");
      try {
        const modelContents = await readJSONFile.readJSONFile(modelPath);
        if (isSharedSliceModel.isSharedSliceModel(modelContents) && modelContents.id === data.sliceID) {
          return modelContents;
        }
      } catch (error) {
        modelReadErrors.push(modelPath);
      }
    }
  }))).filter((model2) => Boolean(model2));
  if (model) {
    return {
      model
    };
  } else {
    if (modelReadErrors.length) {
      throw new Error(`Did not find a Slice model with ID "${data.sliceID}" in the "${data.libraryID}" Slice Library.

Those Slice models could not be read:
  - ${modelReadErrors.join("\n  - ")}`);
    }
    throw new Error(`Did not find a Slice model with ID "${data.sliceID}" in the "${data.libraryID}" Slice Library.`);
  }
};
exports.sliceRead = sliceRead;
//# sourceMappingURL=slice-read.cjs.map
