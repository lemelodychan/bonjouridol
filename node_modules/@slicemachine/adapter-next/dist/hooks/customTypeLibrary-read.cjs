"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const fs = require("node:fs/promises");
const path = require("node:path");
const buildCustomTypeLibraryDirectoryPath = require("../lib/buildCustomTypeLibraryDirectoryPath.cjs");
const readJSONFile = require("../lib/readJSONFile.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const fs__namespace = /* @__PURE__ */ _interopNamespaceDefault(fs);
const path__namespace = /* @__PURE__ */ _interopNamespaceDefault(path);
const isCustomTypeModel = (input) => {
  return typeof input === "object" && input !== null && "json" in input;
};
const customTypeLibraryRead = async (_data, { helpers }) => {
  const dir = buildCustomTypeLibraryDirectoryPath.buildCustomTypeLibraryDirectoryPath({ helpers });
  await fs__namespace.mkdir(dir, { recursive: true });
  const childDirs = await fs__namespace.readdir(dir, { withFileTypes: true });
  const ids = [];
  await Promise.all(childDirs.map(async (childDir) => {
    if (childDir.isDirectory()) {
      const childDirContents = await fs__namespace.readdir(path__namespace.join(dir, childDir.name), {
        withFileTypes: true
      });
      const isCustomTypeDir = childDirContents.some((entry) => {
        return entry.isFile() && entry.name === "index.json";
      });
      if (isCustomTypeDir) {
        const modelPath = path__namespace.join(dir, childDir.name, "index.json");
        const modelContents = await readJSONFile.readJSONFile(modelPath);
        if (isCustomTypeModel(modelContents)) {
          ids.push(modelContents.id);
        }
      }
    }
  }));
  return {
    ids: ids.sort()
  };
};
exports.customTypeLibraryRead = customTypeLibraryRead;
//# sourceMappingURL=customTypeLibrary-read.cjs.map
