'use client';
'use client';
"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const kit = require("@prismicio/simulator/kit");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
const simulatorManager = new kit.SimulatorManager();
const SliceSimulator = ({ sliceZone: SliceZoneComp, background, zIndex, className }) => {
  const defaultProps = kit.getDefaultProps();
  const [slices, setSlices] = React__namespace.useState(() => kit.getDefaultSlices());
  const [message, setMessage] = React__namespace.useState(() => kit.getDefaultMessage());
  React__namespace.useEffect(() => {
    simulatorManager.state.on(kit.StateEventType.Slices, (_slices) => {
      setSlices(_slices);
    }, "simulator-slices");
    simulatorManager.state.on(kit.StateEventType.Message, (_message) => {
      setMessage(_message);
    }, "simulator-message");
    simulatorManager.init();
    return () => {
      simulatorManager.state.off(kit.StateEventType.Slices, "simulator-slices");
      simulatorManager.state.off(kit.StateEventType.Message, "simulator-message");
    };
  }, []);
  return jsxRuntime.jsx("div", { className: [kit.simulatorClass, className].filter(Boolean).join(" "), style: {
    zIndex: typeof zIndex === "undefined" ? defaultProps.zIndex : zIndex ?? void 0,
    position: "fixed",
    top: 0,
    left: 0,
    width: "100%",
    height: "100vh",
    overflow: "auto",
    background: typeof background === "undefined" ? defaultProps.background : background ?? void 0
  }, children: message ? jsxRuntime.jsx("article", { dangerouslySetInnerHTML: { __html: message } }) : slices.length ? jsxRuntime.jsx("div", { id: "root", className: kit.simulatorRootClass, onClickCapture: kit.onClickHandler, onSubmitCapture: kit.disableEventHandler, children: jsxRuntime.jsx(SliceZoneComp, { slices }) }) : null });
};
exports.SliceSimulator = SliceSimulator;
//# sourceMappingURL=SliceSimulator.cjs.map
