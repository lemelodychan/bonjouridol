'use client';
'use client';
import { jsx } from "react/jsx-runtime";
import * as React from "react";
import { SimulatorManager, getDefaultProps, getDefaultSlices, getDefaultMessage, StateEventType, simulatorClass, simulatorRootClass, onClickHandler, disableEventHandler } from "@prismicio/simulator/kit";
const simulatorManager = new SimulatorManager();
const SliceSimulator = ({ sliceZone: SliceZoneComp, background, zIndex, className }) => {
  const defaultProps = getDefaultProps();
  const [slices, setSlices] = React.useState(() => getDefaultSlices());
  const [message, setMessage] = React.useState(() => getDefaultMessage());
  React.useEffect(() => {
    simulatorManager.state.on(StateEventType.Slices, (_slices) => {
      setSlices(_slices);
    }, "simulator-slices");
    simulatorManager.state.on(StateEventType.Message, (_message) => {
      setMessage(_message);
    }, "simulator-message");
    simulatorManager.init();
    return () => {
      simulatorManager.state.off(StateEventType.Slices, "simulator-slices");
      simulatorManager.state.off(StateEventType.Message, "simulator-message");
    };
  }, []);
  return jsx("div", { className: [simulatorClass, className].filter(Boolean).join(" "), style: {
    zIndex: typeof zIndex === "undefined" ? defaultProps.zIndex : zIndex ?? void 0,
    position: "fixed",
    top: 0,
    left: 0,
    width: "100%",
    height: "100vh",
    overflow: "auto",
    background: typeof background === "undefined" ? defaultProps.background : background ?? void 0
  }, children: message ? jsx("article", { dangerouslySetInnerHTML: { __html: message } }) : slices.length ? jsx("div", { id: "root", className: simulatorRootClass, onClickCapture: onClickHandler, onSubmitCapture: disableEventHandler, children: jsx(SliceZoneComp, { slices }) }) : null });
};
export {
  SliceSimulator
};
//# sourceMappingURL=SliceSimulator.js.map
