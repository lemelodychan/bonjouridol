'use client';
'use client';
"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const Link = require("next/link");
const asLinkAttrs = require('./_node_modules/@prismicio/client/dist/helpers/asLinkAttrs.cjs');
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
const PrismicNextLink = React__namespace.forwardRef(function PrismicNextLink2({ field, document, linkResolver, ...restProps }, ref) {
  const { href: computedHref, rel: computedRel, ...attrs } = asLinkAttrs.asLinkAttrs(field ?? document, {
    linkResolver,
    rel: typeof restProps.rel === "function" ? restProps.rel : void 0
  });
  const href = ("href" in restProps ? restProps.href : computedHref) || "";
  let rel = computedRel;
  if ("rel" in restProps && typeof restProps.rel !== "function") {
    rel = restProps.rel;
  }
  return jsxRuntime.jsx(Link, { ref, ...attrs, ...restProps, href, rel });
});
exports.PrismicNextLink = PrismicNextLink;
//# sourceMappingURL=PrismicNextLink.cjs.map
